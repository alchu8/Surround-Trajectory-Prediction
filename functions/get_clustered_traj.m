function [traj_clustered, traj_clustered_ind] = get_clustered_traj(trajectory_data, W, k)
% return cell structure of clustered trajectories after merging, also 
% the indices of the trajectories separated by cluster
% trajectory_data is cell structure of all trajectory data, each 4 x T
% W is generated by SimGraph_Full.m or can be found in 'mat' folder
% k is initially large and will get refined by findk
    L = 15;
    [~, member_hard, membership_value] = SpectralClustering(W, k, 3);
    cell_out = Cluster2Cell(member_hard, membership_value, 0.8);
    cell_out = cell_out(~cellfun('isempty',cell_out)); % remove empty cells
    [prototypes_pre, cluster_id] = findk(trajectory_data, cell_out, membership_value, L);
    prototypes_post = prototypes_pre(cluster_id, :); % merged cluster prototypes

    % plot pre and post merging of prototypes
    figure;
    subplot(1,2,1); hold on;
    legend_str = cell(size(prototypes_pre, 1), 1);
    for p = 1:size(prototypes_pre, 1)
        color = rand(1,3);
        proto = prototypes_pre(p, :);
        proto = [proto(1:2:length(proto)); proto(2:2:length(proto))]; % 2 x L
        plot(proto(1, :), proto(2, :), 'Color', color);
        plot(proto(1, 1), proto(2, 1), 'Color', color, 'Marker', '*');
        legend_str{p} = num2str(p);
    end
    title('Before merge'); legend(legend_str); hold off;
    subplot(1,2,2); hold on;
    legend_str = cell(size(prototypes_post, 1), 1);
    for p = 1:size(prototypes_post, 1)
        color = rand(1,3);
        proto = prototypes_post(p, :);
        proto = [proto(1:2:length(proto)); proto(2:2:length(proto))]; % 2 x L
        plot(proto(1, :), proto(2, :), 'Color', color);
        plot(proto(1, 1), proto(2, 1), 'Color', color, 'Marker', '*');
        legend_str{p} = num2str(p);
    end
    title('After merge'); legend(legend_str); hold off;

    traj_clustered = cell(length(cluster_id), 1); % cells of clusters after merge
    traj_clustered_ind = cell(length(cluster_id), 1);
    for t = 1:length(trajectory_data) % cluster each trajectory into the reduced set
        traj = trajectory_data{t, 1}(1:2, :); % 2 x T
        traj_s = reparameterize(traj, L); % 1 x 2L
        dist = zeros(size(prototypes_post, 1), 1); % distances to each prototype
        for p = 1:size(prototypes_post, 1) % dist between traj and each proto
            proto = prototypes_post(p, :); % 1 x 2L
            dist(p) = dtw_c(traj_s, proto, 3);
        end
        [~, c] = min(dist); % c is index into prototypes_post
        traj_clustered{c, 1}{1+end, 1} = trajectory_data{t, 1}; % put 4 x T traj into cth cluster
        traj_clustered_ind{c, 1}{1, 1+end} = t; % t is index into trajectory_data
    end
    traj_clustered = traj_clustered(~cellfun('isempty',traj_clustered)); % remove empty cells
    traj_clustered_ind = traj_clustered_ind(~cellfun('isempty',traj_clustered_ind));
end